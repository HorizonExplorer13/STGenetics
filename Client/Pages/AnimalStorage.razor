@page "/AnimalStorage"
@inject HttpClient http
@using STGeneticsTest.Shared.DTO;
@using STGeneticsTest.Shared.Entities;
@using System.Text.Json;
@using System.Text;

<h3>AnimalStorage</h3>

<FilterForm FilteredData="filterlist" OnFilter="UpdateData" />

<Grid FilteredData="filterlist" />

@code {
  
    private List<AnimalDatatoShowDTO> filterlist = new List<AnimalDatatoShowDTO>();

    protected override async Task OnInitializedAsync()
    {
        filterlist = await GetInitData();
    }

    public async Task<List<AnimalDatatoShowDTO>> GetInitData()
    {
        var httpresponse = await http.GetAsync("api/AnimalLogs/GetData");
        if (httpresponse.IsSuccessStatusCode)
        {
            var httpcontent = await httpresponse.Content.ReadAsStringAsync();
            var animallist = JsonSerializer.Deserialize<List<AnimalDatatoShowDTO>>(httpcontent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            return animallist;
        }
        else
        {
            Console.WriteLine("Error deserializing the object");
            return new List<AnimalDatatoShowDTO>();
        }
    }

    private async Task UpdateData()
    {
        await FilterForm.FilterData();
        filterlist = FilterForm.FilteredData;
    }

    private FilterForm FilterForm;

    protected override void OnInitialized()
    {
        FilterForm = new FilterForm(); // Crea una instancia del componente FilterForm
    }

    
}
    


